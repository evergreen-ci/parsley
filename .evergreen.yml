stepback: true
command_type: test
ignore:
  - "*.md"
  - ".github/*"

modules:
  - name: evergreen
    repo: git@github.com:evergreen-ci/evergreen.git
    branch: main
    auto_update: true
  - name: logkeeper
    repo: git@github.com:evergreen-ci/logkeeper.git
    branch: main
    auto_update: true


#######################################
#            Parsley Functions        #
#######################################
functions:
  assume-ec2-role:
    command: ec2.assume_role
    params:
      role_arn: ${ASSUME_ROLE_ARN}

  attach-codegen-diff:
    command: s3.put
    type: system
    params:
      aws_key: ${AWS_ACCESS_KEY_ID}
      aws_secret: ${AWS_SECRET_ACCESS_KEY}
      aws_session_token: ${AWS_SESSION_TOKEN}
      local_files_include_filter:
        - "parsley/bin/codegen.diff"
      remote_file: parsley/${task_id}/codegen/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read

  attach-cypress:
    - command: attach.xunit_results
      params:
        files:
          - "./parsley/bin/cypress/*.xml"
    - command: s3.put
      type: system
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_files_include_filter:
          ["parsley/cypress/screenshots/*"]
        remote_file: parsley/${task_id}/
        bucket: mciuploads
        content_type: image/png
        permissions: public-read
        display_name: "screenshot:"
    - command: s3.put
      type: system
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_files_include_filter:
          ["parsley/cypress/videos/*"]
        remote_file: parsley/${task_id}/
        bucket: mciuploads
        content_type: video/mp4
        permissions: public-read
        display_name: "video:"

  attach-test-results:
    command: attach.xunit_results
    params:
      files:
        - "./parsley/bin/jest/*.xml"

  attach-storybook:
    - command: s3.put
      type: system
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_files_include_filter:
          ["parsley/storybook-static/*.html"]
        remote_file: parsley/${task_id}/storybook/
        bucket: mciuploads
        content_type: text/html
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_files_include_filter:
          ["parsley/storybook-static/**/*.js", "parsley/storybook-static/**/*.mjs"]
        remote_file: parsley/${task_id}/storybook/
        bucket: mciuploads
        content_type: application/javascript
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_files_include_filter:
          ["parsley/storybook-static/**/*.js.map"]
        remote_file: parsley/${task_id}/storybook/
        bucket: mciuploads
        content_type: application/json
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_files_include_filter:
          ["parsley/storybook-static/**/*.svg"]
        remote_file: parsley/${task_id}/storybook/
        bucket: mciuploads
        content_type: image/svg+xml
        permissions: public-read
        preserve_path: true
    - command: s3.put
      type: system
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_files_include_filter:
          ["parsley/storybook-static/**/*.json"]
        remote_file: parsley/${task_id}/storybook/
        bucket: mciuploads
        content_type: application/json
        permissions: public-read
        preserve_path: true

  link-to-storybook:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        echo "#############################################"
        echo "Link to Storybook: https://mciuploads.s3.amazonaws.com/parsley/${task_id}/storybook/parsley/storybook-static/index.html"
        echo "#############################################"

  attach-source-map:
    command: s3.put
    type: system
    params:
      aws_key: ${AWS_ACCESS_KEY_ID}
      aws_secret: ${AWS_SECRET_ACCESS_KEY}
      aws_session_token: ${AWS_SESSION_TOKEN}
      local_file: "parsley/build/source_map.html"
      remote_file: parsley/${task_id}/source_map.html
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: source_map

  get-project:
    command: git.get_project
    type: setup
    params:
      directory: parsley

  send-email:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      env:
        AUTHOR_EMAIL: ${author_email}
        DEPLOYS_EMAIL: ${DEPLOYS_EMAIL}
        EXECUTION: ${execution}
      script: |
        bash scripts/email.sh

  setup-credentials:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      env:
        REACT_APP_SENTRY_AUTH_TOKEN: ${REACT_APP_SENTRY_AUTH_TOKEN}
        REACT_APP_SENTRY_DSN: ${REACT_APP_SENTRY_DSN}
        NEW_RELIC_ACCOUNT_ID: ${NEW_RELIC_ACCOUNT_ID}
        NEW_RELIC_AGENT_ID: ${NEW_RELIC_AGENT_ID}
        NEW_RELIC_APPLICATION_ID: ${NEW_RELIC_APPLICATION_ID}
        NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
        NEW_RELIC_TRUST_KEY: ${NEW_RELIC_TRUST_KEY}
        DEPLOYS_EMAIL: ${DEPLOYS_EMAIL}
        BUCKET: ${bucket}
        EVERGREEN_API_SERVER_HOST: ${evergreen_api_server_host}
        EVERGREEN_UI_SERVER_HOST: ${evergreen_api_server_host}
        EVERGREEN_API_KEY: ${evergreen_api_key}
        EVERGREEN_USER: ${evergreen_user}
      script: |
        echo "Generating .env-cmdrc.json"
        node scripts/setup-credentials.js

        echo "populating evergreen.yml"
        ./scripts/create-evergreen-yml.sh
        echo "Done populating evergreen.yml"

  setup-node:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - parsley/scripts/prepare-shell.sh
    - command: expansions.update
      params:
        file: expansion.yml
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          # Fetch NVM and install it into this task's .nvm directory
          # Once downloaded, source nvm and install yarn
          git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
          cd "$NVM_DIR"
          git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          cd -
          nvm install --no-progress --default ${node_version}
          npm install -g yarn

  sym-link:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ln -s evergreen/graphql/schema sdlschema

  yarn-build:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn build:local

  yarn-codegen:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        chmod +x ./scripts/check_codegen.sh
        ./scripts/check_codegen.sh

  yarn-cypress:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        # Only record to cypress cloud if this is a pr or a mainline commit.
        if [[ "${requester}" == "github_pr" || "${requester}" == "commit" || "$requester" == "patch" ]]; then
          yarn cy:run --record --key "${cypress_record_key}" --reporter junit
        else
          yarn cy:run --reporter junit
        fi

  yarn-eslint:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn eslint:strict

  yarn-install:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn install

  yarn-preview:
    command: shell.exec
    params:
      working_dir: parsley
      background: true
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn preview

  yarn-snapshot:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn test --ci --testPathPattern=snapshot.test.ts

  yarn-storybook:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn storybook:build

  yarn-test:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn test --ci --testPathIgnorePatterns=snapshot.test.ts

  yarn-tsc:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn check-types

  yarn-verify-backend:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn verify-backend

  prod-deploy:
    command: shell.exec
    params:
      working_dir: parsley
      shell: bash
      env: 
        BUCKET: ${bucket}
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
        EXECUTION: ${execution}
        DEPLOYS_EMAIL: ${DEPLOYS_EMAIL}
        AUTHOR_EMAIL: ${author_email}
      script: |
        ${PREPARE_SHELL}
        yarn deploy:prod

#######################################
#      Local Evergreen Functions      #
#######################################
  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGODB_URL: ${mongodb_url_70}
          MONGODB_DECOMPRESS: ${decompress}
        working_dir: parsley/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGOSH_URL: ${mongosh_url}
          MONGOSH_DECOMPRESS: ${decompress}
        working_dir: parsley/evergreen
        command: make get-mongosh
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: parsley/evergreen
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: parsley/evergreen
        command: make configure-mongod

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: parsley/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOROOT: ${goroot}

  wait-for-evergreen:
    command: shell.exec
    type: setup
    exec_timeout_secs: 600
    params:
      working_dir: parsley
      shell: bash
      script: ./scripts/wait-for-evergreen.sh


#######################################
#      Local Logkeeper Functions      #
#######################################
  run-logkeeper:
    command: shell.exec
    params:
      working_dir: parsley/logkeeper
      background: true
      script: go run main/logkeeper.go --localPath _bucketdata
      shell: bash
      env:
        GOROOT: ${goroot}
        PATH: ${goroot}/bin:$PATH
        LK_CORS_ORIGINS: http:\/\/localhost:\d+

  attach-logkeeper-logs:
    command: s3.put
    type: system
    params:
      aws_key: ${AWS_ACCESS_KEY_ID}
      aws_secret: ${AWS_SECRET_ACCESS_KEY}
      aws_session_token: ${AWS_SESSION_TOKEN}
      local_file: parsley/logkeeper/logkeeperapp.log
      remote_file: parsley/${task_id}/${execution}/logkeeperapp.log
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read

  seed-logkeeper:
    command: s3.get
    type: setup
    params:
      aws_key: ${AWS_ACCESS_KEY_ID}
      aws_secret: ${AWS_SECRET_ACCESS_KEY}
      aws_session_token: ${AWS_SESSION_TOKEN}
      extract_to: parsley/logkeeper
      remote_file: _bucketdata.tar.gz
      bucket: parsley-test
      working_dir: parsley/logkeeper

#######################################
#                Tasks                #
#######################################
tasks:
  - name: compile
    commands:
    - func: assume-ec2-role
    - func: yarn-build
    - func: attach-source-map

  - name: type_check
    commands:
    - func: yarn-tsc

  - name: lint
    commands:
    - func: sym-link
    - func: yarn-eslint

  - name: test
    commands:
    - func: yarn-test

  - name: e2e_test
    commands:
    - func: assume-ec2-role
    - func: setup-mongodb
    - func: run-make-background
      vars:
        target: local-evergreen
    - func: seed-logkeeper
    - func: run-logkeeper
    - func: yarn-install
    - func: yarn-build
    - func: yarn-preview
    - func: wait-for-evergreen
    - func: yarn-verify-backend
    - func: yarn-cypress

  - name: storybook
    commands:
    - func: assume-ec2-role
    - func: yarn-storybook
    - func: attach-storybook
    - func: link-to-storybook

  - name: snapshots
    commands:
    - func: yarn-snapshot

  - name: check_codegen
    commands:
      - func: sym-link
      - func: yarn-codegen

  - name: deploy-prod
    commands:
      - func: assume-ec2-role
      - func: setup-credentials
      - func: sym-link
      - func: prod-deploy

buildvariants:
  - name: ubuntu2204-small
    display_name: Ubuntu 22.04 (small)
    expansions:
      goroot: /opt/golang/go1.20
      mongodb_url_70: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-7.0.2.tgz
      mongosh_url: https://downloads.mongodb.com/compass/mongosh-2.0.2-linux-x64.tgz
      node_version: 20.10.0
    run_on:
      - ubuntu2204-small
    modules:
      - evergreen
    tasks:
      - name: type_check
      - name: lint
      - name: test
      - name: snapshots
      - name: check_codegen

  - name: ubuntu2204-large
    display_name: Ubuntu 22.04 (large)
    expansions:
      goroot: /opt/golang/go1.20
      mongodb_url_70: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-7.0.2.tgz
      mongosh_url: https://downloads.mongodb.com/compass/mongosh-2.0.2-linux-x64.tgz
      node_version: 20.10.0
    run_on:
      - ubuntu2204-large
    modules:
      - evergreen
      - logkeeper
    tasks:
      - name: e2e_test
      - name: compile
      - name: storybook
      - name: deploy-prod
        git_tag_only: true
        patchable: false
        priority: 100

pre:
  - func: get-project
  - func: setup-node
  - func: yarn-install

post:
  - func: attach-cypress
  - func: attach-logkeeper-logs
  - func: attach-test-results
  - func: attach-codegen-diff
