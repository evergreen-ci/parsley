stepback: true
command_type: test
ignore:
  - "*.md"
  - ".github/*"

modules:
  - name: evergreen
    repo: git@github.com:evergreen-ci/evergreen.git
    branch: main
  - name: logkeeper
    repo: git@github.com:evergreen-ci/logkeeper.git
    branch: main


#######################################
#            Parsley Functions        #
#######################################
functions:
  attach-cypress-results:
    command: attach.xunit_results
    params:
      files:
        - "./parsley/bin/cypress/*.xml"

  attach-cypress-screenshots:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["parsley/cypress/screenshots/*"]
      remote_file: parsley/${task_id}/
      bucket: mciuploads
      content_type: image/png
      permissions: public-read
      display_name: "screenshot:"

  attach-cypress-videos:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["parsley/cypress/videos/*"]
      remote_file: parsley/${task_id}/
      bucket: mciuploads
      content_type: video/mp4
      permissions: public-read
      display_name: "video:"

  attach-test-results:
    command: attach.xunit_results
    params:
      files:
        - "./parsley/bin/jest/*.xml"

  attach-storybook:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["parsley/storybook-static/*"]
      remote_file: parsley/${task_id}/storybook/
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: storybook_

  # Ideally we can get rid of this command upon the completion of EVG-17334.
  attach-storybook-assets-js:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["parsley/storybook-static/assets/*.js"]
      remote_file: parsley/${task_id}/storybook/assets/
      bucket: mciuploads
      content_type: application/javascript
      permissions: public-read
      display_name: storybook_assets_js_

  # Ideally we can get rid of this command upon the completion of EVG-17334.
  attach-storybook-assets-map:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["parsley/storybook-static/assets/*.js.map"]
      remote_file: parsley/${task_id}/storybook/assets/
      bucket: mciuploads
      content_type: application/json
      permissions: public-read
      display_name: storybook_assets_map_
  
  # Ideally we can get rid of this command upon the completion of EVG-17334.
  attach-storybook-assets-svg:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["parsley/storybook-static/assets/*.svg"]
      remote_file: parsley/${task_id}/storybook/assets/
      bucket: mciuploads
      content_type: image/svg+xml
      permissions: public-read
      display_name: storybook_assets_svg_

  attach-source-map:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "parsley/build/source_map.html"
      remote_file: parsley/${task_id}/source_map.html
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: source_map
    

  build-prod:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        chmod +x ./scripts/app-version.sh
        . ./scripts/app-version.sh
        echo "Building Production version: $REACT_APP_VERSION"
        yarn build:production

  copy-cmdrc:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        cp .env-cmdrc.sample.json .env-cmdrc.json

  upload-to-prod-s3:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        BUCKET=${bucket} AWS_ACCESS_KEY_ID=${aws_key} AWS_SECRET_ACCESS_KEY=${aws_secret}  yarn deploy:do-not-use;

  get-project:
    command: git.get_project
    type: setup
    params:
      directory: parsley

  install-chrome:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        cd /tmp
        curl -L -o "chrome.zip" "${chrome_download_url}"
        unzip chrome.zip
        cd -

  send-email:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export AUTHOR_EMAIL=${author_email}
        export REACT_APP_DEPLOYS_EMAIL=${REACT_APP_DEPLOYS_EMAIL}
        export EXECUTION=${execution}
        bash scripts/email.sh

  setup-credentials:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        echo "Generating .cmdrc.json"
        REACT_APP_BUGSNAG_API_KEY=${REACT_APP_BUGSNAG_API_KEY} REACT_APP_NEW_RELIC_ACCOUNT_ID=${REACT_APP_NEW_RELIC_ACCOUNT_ID} REACT_APP_NEW_RELIC_AGENT_ID=${REACT_APP_NEW_RELIC_AGENT_ID} REACT_APP_NEW_RELIC_APPLICATION_ID=${REACT_APP_NEW_RELIC_APPLICATION_ID} REACT_APP_NEW_RELIC_LICENSE_KEY=${REACT_APP_NEW_RELIC_LICENSE_KEY} REACT_APP_NEW_RELIC_TRUST_KEY=${REACT_APP_NEW_RELIC_TRUST_KEY} REACT_APP_DEPLOYS_EMAIL=${REACT_APP_DEPLOYS_EMAIL} node scripts/setup-credentials.js

        echo "populating evergreen.yml"
        cat <<EOF > .evergreen.yml
        api_server_host: ${evergreen_api_server_host}
        ui_server_host: ${evergreen_ui_server_host}
        api_key: ${evergreen_api_key}
        user: ${evergreen_user}
        EOF

        echo "Done populating"

  yarn-build:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn build:local

  yarn-cypress:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn cy:run --browser /tmp/chrome-linux/chrome --record --key ${cypress_record_key} --reporter junit

  yarn-eslint:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn eslint:strict

  yarn-install:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn

  yarn-preview:
    command: shell.exec
    params:
      working_dir: parsley
      background: true
      script: |
        export PATH=${node_path}
        yarn preview

  yarn-snapshot:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn test --ci --testPathPattern=storyshots.test.ts

  yarn-storybook:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn storybook:build

  yarn-test:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn test --ci --testPathIgnorePatterns=storyshots.test.ts

  yarn-tsc:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn check-types

  yarn-verify-backend:
    command: shell.exec
    params:
      working_dir: parsley
      script: |
        export PATH=${node_path}
        yarn verify-backend

#######################################
#      Local Evergreen Functions      #
#######################################
  get-evergreen-project:
    command: git.get_project
    type: setup
    params:
      directory: parsley
      revisions:
        evergreen: ${evergreen_rev}

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGODB_URL: ${mongodb_url}
          DECOMPRESS: ${decompress}
        working_dir: parsley/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: parsley/evergreen
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: parsley/evergreen
        command: make configure-mongod

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: parsley/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOROOT: ${goroot}

  wait-for-evergreen:
    command: shell.exec
    type: setup
    params:
      working_dir: parsley
      script: ./scripts/wait-for-evergreen.sh


#######################################
#      Local Logkeeper Functions      #
#######################################
  get-logkeeper-project:
    command: git.get_project
    type: setup
    params:
      directory: parsley
      revisions:
        logkeeper: ${logkeeper_rev}

  run-logkeeper:
    command: shell.exec
    params:
      working_dir: parsley/logkeeper
      background: true
      script: go run main/logkeeper.go --localPath _bucketdata
      env:
        GOROOT: ${goroot}
        PATH: ${goroot}/bin:$PATH
        LK_CORS_ORIGINS: http:\/\/localhost:\d+

  attach-logkeeper-logs:
    command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: parsley/logkeeper/logkeeperapp.log
      remote_file: parsley/${task_id}/${execution}/logkeeperapp.log
      bucket: mciuploads
      content_type: text/html
      permissions: public-read

  seed-logkeeper:
    command: s3.get
    type: setup
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      extract_to: parsley/logkeeper
      remote_file: _bucketdata.tar.gz
      bucket: parsley-test
      working_dir: parsley/logkeeper

#######################################
#                Tasks                #
#######################################
tasks:
  - name: compile
    commands:
    - func: copy-cmdrc
    - func: yarn-build
    - func: attach-source-map

  - name: type_check
    commands:
    - func: yarn-tsc

  - name: lint
    commands:
    - func: yarn-eslint

  - name: test
    commands:
    - func: yarn-test

  - name: e2e_test
    commands:
    - func: get-evergreen-project
    - func: get-logkeeper-project
    - func: setup-mongodb
    - func: run-make-background
      vars:
        target: local-evergreen
    - func: seed-logkeeper
    - func: run-logkeeper
    - func: copy-cmdrc
    - func: yarn-install
    - func: yarn-build
    - func: yarn-preview
    - func: install-chrome
    - func: wait-for-evergreen
    - func: yarn-verify-backend
    - func: yarn-cypress

  - name: storybook
    commands:
    - func: copy-cmdrc
    - func: yarn-storybook
    - func: attach-storybook
    - func: attach-storybook-assets-js
    - func: attach-storybook-assets-svg
    - func: attach-storybook-assets-map

  - name: snapshots
    commands:
    - func: yarn-snapshot
  
  - name: deploy-prod
    commands:
    - func: setup-credentials
    - func: build-prod
    - func: upload-to-prod-s3
    - func: send-email

buildvariants:
  - name: ubuntu1604-small
    display_name: Ubuntu 16.04 (small)
    run_on:
    - ubuntu1604-small
    tasks:
    - name: compile
    - name: type_check
    - name: lint
    - name: test
    - name: storybook
    - name: snapshots
    - name: deploy-prod

  - name: ubuntu1604-large
    display_name: Ubuntu 16.04 (large)
    run_on:
    - ubuntu1604-large
    modules:
      - evergreen
      - logkeeper
    tasks:
    - name: e2e_test

pre:
  - func: get-project
  - func: yarn-install

post:
  - func: attach-cypress-results
  - func: attach-cypress-screenshots
  - func: attach-cypress-videos
  - func: attach-logkeeper-logs
  - func: attach-test-results